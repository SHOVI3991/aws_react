{"ast":null,"code":"import cookie from 'js-cookie';\nimport Router from 'next/router'; //set in cookie\n\nexport const setCookie = (key, value) => {\n  if (true) {\n    cookie.set(key, value, {\n      expires: 1\n    });\n  }\n}; //remove from cookie\n\nexport const removeCookie = key => {\n  if (true) {\n    cookie.remove(key);\n  }\n}; //get from cookie such as stored token\n//will be useful when we need to make request to server with auth token\n\nexport const getCookie = key => {\n  if (true) {\n    return cookie.get(key);\n  }\n}; //set in localstorage\n\nexport const setLocalStorage = (key, value) => {\n  if (true) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n}; //remove from localstorage\n\nexport const removeLocalStorage = key => {\n  if (true) {\n    localStorage.removeItem(key);\n  }\n}; //authenticate user by passing data to cookie and localstorage during signin\n\nexport const authenticate = (response, next) => {\n  setCookie('token', response.data.token);\n  setLocalStorage('user', response.data.user);\n  next();\n}; //access user info from localstorage\n\nexport const isAuth = () => {\n  if (true) {\n    const cookieChecked = getCookie('token');\n\n    if (cookieChecked) {\n      if (localStorage.getItem('user')) {\n        return JSON.parse(localStorage.getItem('user'));\n      } else {\n        return false;\n      }\n    }\n  }\n};\nexport const logout = () => {\n  removeCookie('token');\n  removeLocalStorage('user');\n  Router.push('/login');\n};","map":{"version":3,"sources":["D:/react/mca6/aws_react/client/helpers/auth.js"],"names":["cookie","Router","setCookie","key","value","set","expires","removeCookie","remove","getCookie","get","setLocalStorage","localStorage","setItem","JSON","stringify","removeLocalStorage","removeItem","authenticate","response","next","data","token","user","isAuth","cookieChecked","getItem","parse","logout","push"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACrC,YAAoB;AAChBJ,IAAAA,MAAM,CAACK,GAAP,CAAWF,GAAX,EAAgBC,KAAhB,EAAuB;AACnBE,MAAAA,OAAO,EAAE;AADU,KAAvB;AAGH;AACJ,CANM,C,CAQP;;AACA,OAAO,MAAMC,YAAY,GAAIJ,GAAD,IAAS;AACjC,YAAoB;AAChBH,IAAAA,MAAM,CAACQ,MAAP,CAAcL,GAAd;AACH;AACJ,CAJM,C,CAMP;AACA;;AACA,OAAO,MAAMM,SAAS,GAAGN,GAAG,IAAI;AAC5B,YAAoB;AAChB,WAAOH,MAAM,CAACU,GAAP,CAAWP,GAAX,CAAP;AACH;AACJ,CAJM,C,CAKP;;AACA,OAAO,MAAMQ,eAAe,GAAG,CAACR,GAAD,EAAMC,KAAN,KAAgB;AAC3C,YAAoB;AAChBQ,IAAAA,YAAY,CAACC,OAAb,CAAqBV,GAArB,EAA0BW,IAAI,CAACC,SAAL,CAAeX,KAAf,CAA1B;AACH;AACJ,CAJM,C,CAMP;;AACA,OAAO,MAAMY,kBAAkB,GAAIb,GAAD,IAAS;AACvC,YAAoB;AAChBS,IAAAA,YAAY,CAACK,UAAb,CAAwBd,GAAxB;AACH;AACJ,CAJM,C,CAMP;;AACA,OAAO,MAAMe,YAAY,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC5ClB,EAAAA,SAAS,CAAC,OAAD,EAAUiB,QAAQ,CAACE,IAAT,CAAcC,KAAxB,CAAT;AACAX,EAAAA,eAAe,CAAC,MAAD,EAASQ,QAAQ,CAACE,IAAT,CAAcE,IAAvB,CAAf;AACAH,EAAAA,IAAI;AACP,CAJM,C,CAMP;;AACA,OAAO,MAAMI,MAAM,GAAG,MAAM;AACxB,YAAoB;AAChB,UAAMC,aAAa,GAAGhB,SAAS,CAAC,OAAD,CAA/B;;AACA,QAAGgB,aAAH,EAAkB;AACd,UAAGb,YAAY,CAACc,OAAb,CAAqB,MAArB,CAAH,EAAiC;AAC7B,eAAOZ,IAAI,CAACa,KAAL,CAAWf,YAAY,CAACc,OAAb,CAAqB,MAArB,CAAX,CAAP;AACH,OAFD,MAEK;AACD,eAAO,KAAP;AACH;AACJ;AACJ;AACJ,CAXM;AAaP,OAAO,MAAME,MAAM,GAAG,MAAM;AACxBrB,EAAAA,YAAY,CAAC,OAAD,CAAZ;AACAS,EAAAA,kBAAkB,CAAC,MAAD,CAAlB;AACAf,EAAAA,MAAM,CAAC4B,IAAP,CAAY,QAAZ;AACH,CAJM","sourcesContent":["import cookie from 'js-cookie';\r\nimport Router from 'next/router';\r\n\r\n//set in cookie\r\nexport const setCookie = (key, value) => {\r\n    if(process.browser) {\r\n        cookie.set(key, value, {\r\n            expires: 1\r\n        })\r\n    }    \r\n};\r\n\r\n//remove from cookie\r\nexport const removeCookie = (key) => {\r\n    if(process.browser) {\r\n        cookie.remove(key)\r\n    }    \r\n};\r\n\r\n//get from cookie such as stored token\r\n//will be useful when we need to make request to server with auth token\r\nexport const getCookie = key => {\r\n    if(process.browser) {\r\n        return cookie.get(key)\r\n    }\r\n};\r\n//set in localstorage\r\nexport const setLocalStorage = (key, value) => {\r\n    if(process.browser) {\r\n        localStorage.setItem(key, JSON.stringify(value))\r\n    }\r\n};\r\n\r\n//remove from localstorage\r\nexport const removeLocalStorage = (key) => {\r\n    if(process.browser) {\r\n        localStorage.removeItem(key)\r\n    }\r\n};\r\n\r\n//authenticate user by passing data to cookie and localstorage during signin\r\nexport const authenticate = (response, next) => {\r\n    setCookie('token', response.data.token)\r\n    setLocalStorage('user', response.data.user)\r\n    next()\r\n};\r\n\r\n//access user info from localstorage\r\nexport const isAuth = () => {\r\n    if(process.browser) {\r\n        const cookieChecked = getCookie('token')\r\n        if(cookieChecked) {\r\n            if(localStorage.getItem('user')) {\r\n                return JSON.parse(localStorage.getItem('user'));\r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const logout = () => {\r\n    removeCookie('token')\r\n    removeLocalStorage('user')\r\n    Router.push('/login');\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}